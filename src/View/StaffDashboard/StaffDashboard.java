/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View.StaffDashboard;

import View.Login.LoginForm;
import Controller.ControllerPatients;
import Controller.ControllerQueue;
import Model.Patients.ModelPatients;
import Model.Queue.ModelQueue;
import Model.Users.ModelUsers;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * @author Iam
 */
public class StaffDashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     *
     * @param user
     */
    public StaffDashboard(ModelUsers user) {
        initComponents();
        System.out.println("DEBUG : About to set the table model.");
        refreshTable();
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //Listener to change button text
        idInputField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                updateButtonState();
            }

            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                updateButtonState();
            }

            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                updateButtonState();
            }
        });

        setAlignLeftTable();
        applyDefaultSorter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameInputField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        phoneInputField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dobDateChooser = new com.toedter.calendar.JDateChooser();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        nameSearchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        idInputField = new javax.swing.JTextField();
        refreshAddButton = new javax.swing.JButton();
        resetSearchButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        idQueueField = new javax.swing.JTextField();
        queueAddButton = new javax.swing.JButton();
        refreshQueueButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        queueCallButton = new javax.swing.JButton();
        queueDoneButton = new javax.swing.JButton();
        queueSkipButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        idQueueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        tableLable = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        logoutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        jLabel1.setText("Add/Edit/Remove Patient");

        jLabel2.setText("Name:");

        nameInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameInputFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Phone Number:");

        jLabel3.setText("Date of Birth:");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Name:");

        nameSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSearchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Search Patient");

        jLabel5.setText("ID:");

        idInputField.setEditable(false);
        idInputField.setText("0");
        idInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idInputFieldActionPerformed(evt);
            }
        });

        refreshAddButton.setText("⟳");
        refreshAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshAddButtonActionPerformed(evt);
            }
        });

        resetSearchButton.setText("Reset");
        resetSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSearchButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Queue Patient (Select on Table)");

        jLabel7.setText("ID:");

        idQueueField.setEditable(false);
        idQueueField.setText("0");
        idQueueField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idQueueFieldActionPerformed(evt);
            }
        });

        queueAddButton.setText("Queue");
        queueAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueAddButtonActionPerformed(evt);
            }
        });

        refreshQueueButton.setText("⟳");
        refreshQueueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshQueueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(121, 121, 121))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(77, 77, 77)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(searchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetSearchButton))
                            .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(55, 55, 55)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(idQueueField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(refreshQueueButton))))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(addButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteButton))
                                .addComponent(nameInputField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(phoneInputField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dobDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(idInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(47, 47, 47)
                                            .addComponent(queueAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(refreshAddButton))))))
                .addGap(63, 63, 63))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetSearchButton)
                    .addComponent(searchButton))
                .addGap(36, 36, 36)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idQueueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(refreshQueueButton))
                .addGap(18, 18, 18)
                .addComponent(queueAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(refreshAddButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(phoneInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dobDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(addButton))
                .addGap(42, 42, 42))
        );

        tabbedPane.addTab("Patients", jPanel2);

        jLabel8.setText("CALL QUEUE");

        queueCallButton.setText("Call");
        queueCallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueCallButtonActionPerformed(evt);
            }
        });

        queueDoneButton.setText("Done");
        queueDoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueDoneButtonActionPerformed(evt);
            }
        });

        queueSkipButton.setText("Skip");
        queueSkipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueSkipButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Currently Taking Patient ID:");

        idQueueLabel.setText("-");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(99, 99, 99))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(queueSkipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(queueDoneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(queueCallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idQueueLabel)
                        .addGap(77, 77, 77)))
                .addGap(107, 107, 107))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(145, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(queueCallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(idQueueLabel))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queueDoneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queueSkipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(246, 246, 246))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 1, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 710, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabbedPane.addTab("Queue", jPanel1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        tableLable.setText("XXXXXXXXXXXXXX");

        jMenu3.setText("Setting");

        logoutMenuItem.setText("Logout");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(logoutMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1387, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tableLable)
                        .addGap(644, 644, 644))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setAlignLeftTable() {
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(SwingConstants.LEFT);
        table.getColumnModel().getColumn(0).setCellRenderer(leftRenderer);
    }

    private void applyDefaultSorter() {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());
        table.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        setAlignLeftTable();
    }

    private void updateButtonState() {
        try {
            int id = Integer.parseInt(idInputField.getText());
            if (id != 0) {
                addButton.setText("Edit");
            } else {
                addButton.setText("Add");
            }
        } catch (NumberFormatException e) {
            // If the field is empty or contains invalid text, default to "Add"
            addButton.setText("Add");
        }
    }

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        LoginForm loginForm = new LoginForm();
        loginForm.setLocationRelativeTo(null);
        loginForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    public int getIdInput() {
        try {
            return Integer.parseInt(idInputField.getText());
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    /**
     * Gets the text from the Name input field in the Patients tab.
     *
     * @return The patient's name as a String.
     */
    public String getNameInput() {
        return nameInputField.getText();
    }

    /**
     * Gets the text from the Phone input field.
     *
     * @return The patient's phone number as a String.
     */
    public String getPhoneInput() {
        return phoneInputField.getText();
    }

    /**
     * Gets the selected date from the Date of Birth chooser.
     *
     * @return The selected date as a java.til.Date object.
     */
    public Date getDobInput() {
        return dobDateChooser.getDate();
    }

    /**
     * Gets the text from the patient search field.
     *
     * @return The name to search for as a String.
     */
    public String getNameSearch() {
        return nameSearchField.getText();
    }

    /**
     * Gets the text from the ID input field in the Queue tab.
     *
     * @return The ID as an integer. Returns 0 if invalid.
     */
    public int getIdQueue() {
        try {
            return Integer.parseInt(idQueueField.getText());
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    /**
     * Gets the text from the name search field in the Queue tab.
     *
     * @return The name to search for as a String.
     */
    //==========================================================================
    // SETTERS FOR INPUT VALUES (to populate the form with data)
    //==========================================================================

    /**
     * Sets the text for the main ID input field.
     *
     * @param id The integer ID to display.
     */
    public void setIdInput(int id) {
        idInputField.setText(String.valueOf(id));
    }

    /**
     * Sets the text for the Name input field.
     *
     * @param name The String name to display.
     */
    public void setNameInput(String name) {
        nameInputField.setText(name);
    }

    /**
     * Sets the text for the Phone input field.
     *
     * @param phone The String phone number to display.
     */
    public void setPhoneInput(String phone) {
        phoneInputField.setText(phone);
    }

    /**
     * Sets the selected date for the Date of Birth chooser.
     *
     * @param date The java.util.Date to display.
     */
    public void setDobInput(Date date) {
        dobDateChooser.setDate(date);
    }

    public void setIdQueue(int id) {
        idQueueField.setText(String.valueOf(id));
    }

    /**
     * Sets the text for the Currently Calling ID label in the Queue tab.
     *
     * @param id The integer ID to display. Use 0 or less to show "-".
     */

    //==========================================================================
    // GETTERS FOR UI COMPONENTS (to access the components themselves)
    //==========================================================================
    public JTable getTable() {
        return table;
    }

    // --- Patients Tab Buttons ---
    public JButton getAddButton() {
        return addButton;
    }

    public JButton getDeleteButton() {
        return deleteButton;
    }

    public JButton getSearchButton() {
        return searchButton;
    }

    public JButton getRefreshButton() {
        return refreshAddButton;
    }

    // --- Queue Tab Buttons ---
    public JButton getQueueAddButton() {
        return queueAddButton;
    }

    public JButton getQueueCallButton() {
        return queueCallButton;
    }

    public JButton getQueueDoneButton() {
        return queueDoneButton;
    }

    public JButton getQueueRefreshButton() {
        return refreshQueueButton;
    }

    public JButton getQueueSkipButton() {
        return queueSkipButton;
    }

    public com.toedter.calendar.JDateChooser getDobDateChooser() {
        return dobDateChooser;
    }

    public void clearAddFields() {
        idInputField.setText("0");
        idQueueField.setText("0");
        nameInputField.setText("");
        phoneInputField.setText("");
        dobDateChooser.setDate(null);
    }

    public void refreshTable() {
        int selectedIndex = tabbedPane.getSelectedIndex();
        String selectedTitle = tabbedPane.getTitleAt(selectedIndex);
        if (selectedTitle.equals("Patients")) {
            System.out.println("Loading user data now...");
            table.setModel(ControllerPatients.getTableModel());
            table.getTableHeader().setReorderingAllowed(false);
            tableLable.setText("Patients Table");
        }
        if (selectedTitle.equals("Queue")) {
            System.out.println("Loading user data now...");
            table.setModel(ControllerQueue.getTableModel());
            table.getTableHeader().setReorderingAllowed(false);
            tableLable.setText("Queue Table");
        }
        applyDefaultSorter();
    }

    private void nameInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameInputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameInputFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            ControllerPatients controller = new ControllerPatients();
            int id = this.getIdInput();
            String name = this.getNameInput();
            String phone = this.getPhoneInput();
            Date dob = this.getDobInput();

            if (name.trim().isEmpty() || phone.trim().isEmpty() || dob == null) {
                JOptionPane.showMessageDialog(this, "All field must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return; // Stop the process if validation fails
            }

            ModelPatients patientData = new ModelPatients(id, name, phone, dob);

            if (id > 0) {
                controller.update(this, patientData);
            } else {
                controller.insert(this, patientData);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid ID Format.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
        clearAddFields();
        refreshTable();
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // 1. Get the ID from the input field.
        int id = this.getIdInput();

        // 2. Validate that a patient is actually selected.
        if (id == 0) {
            JOptionPane.showMessageDialog(this, "Please select a patient from the table to delete.", "No Patient Selected", JOptionPane.WARNING_MESSAGE);
            return; // Stop the method here
        }

        // 3. Ask for confirmation before deleting.
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete patient with ID " + id + "?\nThis action cannot be undone.",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        // 4. Proceed only if the user clicks "Yes".
        if (response == JOptionPane.YES_OPTION) {
            // Create an instance of the controller to use its methods.
            ControllerPatients controller = new ControllerPatients();

            // Even though we only need the ID, the controller method requires a full object.
            ModelPatients patientToDelete = new ModelPatients(id, "", "", null);

            // 5. Call the controller's delete method.
            controller.delete(patientToDelete);

            // 6. Refresh the UI.
            clearAddFields();
            refreshTable();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void queueCallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueCallButtonActionPerformed
        ControllerQueue controller = new ControllerQueue();

        ModelQueue calledPatient = controller.callNextPatientInQueue(this);

        if (calledPatient != null) {
            // 4. Update the UI fields with the called patient's information
            idQueueField.setText(String.valueOf(calledPatient.getPatientId()));

            // Also update the "Currently Taking" label
            idQueueLabel.setText(String.valueOf(calledPatient.getPatientId()));

            // 5. Refresh the queue table to show the status change from WAITING to CALLED
            
        }
        refreshTable();
    }//GEN-LAST:event_queueCallButtonActionPerformed

    private void nameSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameSearchFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String nameToSearch = this.getNameSearch();

        if (nameToSearch.trim().isEmpty()) {
            // If the search box is empty, just refresh the whole table
            refreshTable();
            return;
        }

        ControllerPatients controller = new ControllerPatients();
        TableModel searchResults = controller.searchByName(nameToSearch);

        table.setModel(searchResults);
        table.setAutoCreateRowSorter(true);
        setAlignLeftTable();
        System.out.println("Search completed. Displaying " + searchResults.getRowCount() + " results.");
        tableLable.setText("Search Result: Patients");
    }//GEN-LAST:event_searchButtonActionPerformed

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        refreshTable();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void idInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idInputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idInputFieldActionPerformed

    private void refreshAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshAddButtonActionPerformed
        clearAddFields();
        table.clearSelection();
    }//GEN-LAST:event_refreshAddButtonActionPerformed

    private void queueDoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueDoneButtonActionPerformed
        int patientIdToSkip = Integer.parseInt(idQueueLabel.getText());
        if (patientIdToSkip == 0) {
            JOptionPane.showMessageDialog(this, "No patient is currently being called.", "Cannot Skip", JOptionPane.WARNING_MESSAGE);
            return;
        }
        ControllerQueue controller = new ControllerQueue();
        controller.skipPatient(this, patientIdToSkip, 1);
        refreshTable();
    }//GEN-LAST:event_queueDoneButtonActionPerformed

    private void queueSkipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueSkipButtonActionPerformed
        int patientIdToSkip = Integer.parseInt(idQueueLabel.getText());
        if (patientIdToSkip == 0) {
            JOptionPane.showMessageDialog(this, "No patient is currently being called.", "Cannot Skip", JOptionPane.WARNING_MESSAGE);
            return;
        }
        ControllerQueue controller = new ControllerQueue();
        controller.skipPatient(this, patientIdToSkip, 0);
        refreshTable();
    }//GEN-LAST:event_queueSkipButtonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int selectedTabIndex = tabbedPane.getSelectedIndex();
        String currentTabTitle = tabbedPane.getTitleAt(selectedTabIndex);

        // --- START DEBUGGING CODE ---
        System.out.println("DEBUG: Clicked on tab: " + currentTabTitle);
        System.out.println("DEBUG: Table has " + table.getColumnCount() + " columns.");
        System.out.println("DEBUG: The TableModel class is: " + table.getModel().getClass().getName());
        // --- END DEBUGGING CODE ---

        if ("Patients".equals(currentTabTitle)) {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                // Check if there are enough columns before accessing them
                if (table.getColumnCount() < 4) {
                    JOptionPane.showMessageDialog(this, "TableModel is not configured correctly! It only has " + table.getColumnCount() + " columns.", "Model Error", JOptionPane.ERROR_MESSAGE);
                    return; // Stop here to prevent the error
                }

                try {
                    Integer id = (Integer) table.getValueAt(selectedRow, 0);
                    String name = (String) table.getValueAt(selectedRow, 1);
                    String phone = (String) table.getValueAt(selectedRow, 2);
                    Date dob = (Date) table.getValueAt(selectedRow, 3);

                    this.setIdInput(id);
                    this.setIdQueue(id);
                    this.setNameInput(name);
                    this.setPhoneInput(phone);
                    this.setDobInput(dob);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error reading patient data from table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_tableMouseClicked

    private void resetSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSearchButtonActionPerformed
        nameSearchField.setText("");
        refreshTable();
    }//GEN-LAST:event_resetSearchButtonActionPerformed

    private void idQueueFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idQueueFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idQueueFieldActionPerformed

    private void queueAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueAddButtonActionPerformed
        int patientId = this.getIdInput();
        if (patientId == 0) {
            JOptionPane.showMessageDialog(this, "Please select a patient from the Patients table first.", "No Patient Selected", JOptionPane.WARNING_MESSAGE);
            return; // Stop the method here.
        }
        // 3. Create an instance of the new queue controller.
        ControllerQueue queueController = new ControllerQueue();
        queueController.callQueue(this, patientId);

        // 5. Optional but recommended: Refresh the table view.
        // This won't show the new queue data until you implement the DAO/TableModel for it,
        // but it's good practice to have it here.
        refreshTable();
    }//GEN-LAST:event_queueAddButtonActionPerformed

    private void refreshQueueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshQueueButtonActionPerformed
        clearAddFields();
        table.clearSelection();
    }//GEN-LAST:event_refreshQueueButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ModelUsers user = null;
                StaffDashboard dashboard = new StaffDashboard(user);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private com.toedter.calendar.JDateChooser dobDateChooser;
    private javax.swing.JTextField idInputField;
    private javax.swing.JTextField idQueueField;
    private javax.swing.JLabel idQueueLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JTextField nameInputField;
    private javax.swing.JTextField nameSearchField;
    private javax.swing.JTextField phoneInputField;
    private javax.swing.JButton queueAddButton;
    private javax.swing.JButton queueCallButton;
    private javax.swing.JButton queueDoneButton;
    private javax.swing.JButton queueSkipButton;
    private javax.swing.JButton refreshAddButton;
    private javax.swing.JButton refreshQueueButton;
    private javax.swing.JButton resetSearchButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table;
    private javax.swing.JLabel tableLable;
    // End of variables declaration//GEN-END:variables
}
